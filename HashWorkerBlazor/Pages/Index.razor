@page "/"

@using System.Diagnostics
@using HashWorkerBlazor.DB
@using HashWorkerBlazor.JSInterop
@using HashWorkerBlazor.Models
@using System.Text
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Security.Cryptography
@using OfficeOpenXml
@using OfficeOpenXml.Style
@using static HashWorkerBlazor.Tools.EncryptHelper
@inject ISnackbar Snackbar
@inject IHashWorkerApi api
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime jsRuntime

<PageTitle>Index</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="8" md="8">
        <MudPaper Class="pa-4 ma-1" Elevation="3">        
            <MudAlert Severity="Severity.Info">
                @hashResult
            </MudAlert>
            <div class="e-upload e-control-wrapper e-lib e-keyboard">
                <input type="file" id="filepicker" name="fileList" class="e-file-select-wrap e-upload-browse-btn" webkitdirectory multiple />
            </div>
        </MudPaper>    
    </MudItem>
</MudGrid>
<div class="p-1">
    <MudButton Disabled="@(isLoading_scan || isLoading_send || isLoading_export || itemList.Count()==0)" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="@SendBtnClick">
        @if (isLoading_send)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Send Hash</MudText>
        }
    </MudButton>
    <MudButton Disabled="@(isLoading_scan || isLoading_send || isLoading_export || itemList.Count()==0)" Variant="Variant.Filled" StartIcon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Warning" OnClick="@ExportBtnClick">
        @if (isLoading_export)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Export Excel</MudText>
        }
    </MudButton>
    <MudToggleIconButton Toggled="@isShowConsole" Icon="@Icons.Material.Filled.AlarmOff" Color="@Color.Error" Title="Off"
                         ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success" ToggledTitle="On"
                         ToggledChanged="OnToggledChanged" />
    <span>Console Message is @(isShowConsole ? "On" : "Off")</span>
</div>

@if(itemList == null)
{
    <p><em>Loading...😘😘</em></p>
}
else
{
    <MudTable Items="@itemList" Dense="true" Hover="true" Bordered="false" Striped="true"
          RowsPerPage="10" Loading="@(isLoading_scan || isLoading_send)" LoadingProgressColor="Color.Info">
        @*<ToolBarContent>
            <MudText Typo="Typo.h6">Hash List
            </MudText>
        </ToolBarContent>*@
        <HeaderContent>
            <MudTh>No</MudTh>
            <MudTh>Hash</MudTh>
            <MudTh>FileName</MudTh>
            <MudTh>FilePath</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="No">@context.No</MudTd>
            <MudTd DataLabel="Hash">@context.Hash</MudTd>
            <MudTd DataLabel="FileName">@context.FileName</MudTd>
            <MudTd DataLabel="FilePath" HideSmall="true">@context.FilePath</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {

    private DotNetObjectReference<Index>? dotNetHelper;
    private int totalCnt = 0, currCnt = 0;
    private string hashResult = "drop your folder below😘😘";
    private bool isShowConsole = false;

    private List<HashContent> itemList = new List<HashContent>();
    private bool isLoading_scan = false;
    private bool isLoading_send = false;
    private bool isLoading_export = false;
    Stopwatch sw = new Stopwatch();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await jsRuntime.InvokeVoidAsync("Md5Helper.setDotNetHelper", dotNetHelper);
            await jsRuntime.InvokeVoidAsync("Md5Helper.setIsShowConsole", isShowConsole);
            await jsRuntime.InvokeVoidAsync("Md5Helper.setInputComponent");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task GenerateExcel(IJSRuntime iJSRuntime)
    {
        byte[] fileContents;
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (var package = new ExcelPackage())
        {
            var workSheet = package.Workbook.Worksheets.Add("File Hash");

            #region Header Row
            workSheet.Cells[1, 1].Value = "No";
            workSheet.Cells[1, 2].Value = "Hash";
            workSheet.Cells[1, 3].Value = "FileName";
            workSheet.Cells[1, 4].Value = "FileSize";
            workSheet.Cells[1, 5].Value = "FilePath";

            workSheet.Cells["A1:E1"].Style.Fill.PatternType = ExcelFillStyle.Solid;
            workSheet.Cells["A1:E1"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.PowderBlue);
            workSheet.Cells["A1:E1"].Style.Font.Size = 12;
            workSheet.Cells["A1:E1"].Style.Font.Bold = true;
            workSheet.Cells["A1:E1"].Style.Border.BorderAround(ExcelBorderStyle.Hair);
            #endregion

            #region Body Row
            for (int i = 0; i < itemList.Count(); i++)
            {
                workSheet.Cells[2 + i, 1].Value = itemList[i].No.ToString();
                workSheet.Cells[2 + i, 2].Value = itemList[i].Hash.ToUpper();
                workSheet.Cells[2 + i, 3].Value = itemList[i].FileName;
                workSheet.Cells[2 + i, 4].Value = $"{itemList[i].FileSize:N0}";
                workSheet.Cells[2 + i, 5].Value = itemList[i].FilePath;

                workSheet.Cells[$"A{2 + i}:E{2 + i}"].Style.Font.Size = 12;
                workSheet.Cells[$"A{2 + i}:E{2 + i}"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                workSheet.Cells[$"A{2 + i}:E{2 + i}"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Azure);
                workSheet.Cells[$"A{2 + i}:E{2 + i}"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                workSheet.Cells[$"A{2 + i}:E{2 + i}"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                workSheet.Cells[$"A{2 + i}:E{2 + i}"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                workSheet.Cells[$"A{2 + i}:E{2 + i}"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
            }
            #endregion

            workSheet.Cells["A:E"].AutoFitColumns();

            fileContents = package.GetAsByteArray();
        }

        await iJSRuntime.InvokeVoidAsync(
            "saveAsFile",
            $"{itemList.First().FilePath.Split('/')?[0] ?? "FileHash"}-{DateTime.Now.ToString("yyyyMMddhhmmss")}.xlsx",
            Convert.ToBase64String(fileContents)
        );
    }

    private async void OnToggledChanged(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourself
        isShowConsole = toggled;

        await jsRuntime.InvokeVoidAsync("Md5Helper.setIsShowConsole", isShowConsole);
    }

    [JSInvokable]
    public async void JsSendFileCntAsync(int arrLen)
    {
        currCnt = 0; 
        totalCnt = arrLen;

        hashResult = $"found {totalCnt:N0} files";
        itemList.Clear();
        isLoading_scan = true;

        sw.Restart();
    }

    [JSInvokable]
    public async void JsSendFileHashAsync(string fileName, string filePath, int fileSize, string fileHash)
    {
        currCnt++;
        //
        hashResult = $"{currCnt:N0}/{totalCnt:N0}";

        //TODO: rewrite the code below!
        itemList.Add(new HashContent
            {
                No = currCnt,
                FileName = fileName,
                FilePath = filePath,
                FileSize = fileSize,
                Hash = fileHash
            });

        if (totalCnt<100 || currCnt % 10 == 0)
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }

        //When all complete!
        if (currCnt == totalCnt)
        {
            sw.Stop();
            Snackbar.Add(hashResult = $"{itemList.Count():N0} rows updated in {sw.Elapsed.TotalSeconds:N2}s!", Severity.Warning);
            //
            isLoading_scan = false;
            //
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private async Task ExportBtnClick()
    {
        if (itemList.Count == 0)
        {
            Snackbar.Add("Empty list!", Severity.Error);
            return;
        }
        //
        isLoading_export = true;
        //
        await Task.Delay(1);
        //
        await GenerateExcel(jsRuntime);
        //var json = JsonSerializer.Serialize<List<HashContent>>(itemList, new JsonSerializerOptions { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping });
        //var account = (await authenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.Name ?? string.Empty;
        //var result = await api.SendListAsync(account, json, SHA1Encrypt.genStrHash(json), itemList.Count());
        //
        //Snackbar.Add(result.msg, result.isOk ? Severity.Warning : Severity.Error);
        //
        isLoading_export = false;
    }

    private async Task SendBtnClick()
    {
        if (itemList.Count==0)
        {
            Snackbar.Add("Empty list!", Severity.Error);
            return;
        }
        //
        isLoading_send = true;
        //
        await Task.Delay(1);
        //
        var json=JsonSerializer.Serialize<List<HashContent>>(itemList, new JsonSerializerOptions{ Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping});
        var account = (await authenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.Name ?? string.Empty;
        var result = await api.SendListAsync(account, json, SHA1Encrypt.genStrHash(json), itemList.Count());
        //
        Snackbar.Add(result.msg, result.isOk ? Severity.Warning : Severity.Error);
        //
        isLoading_send = false;
    }

    //private async Task ScanBtnClick()
    //{
    //    if (!Directory.Exists(scanPath))
    //    {
    //        Snackbar.Add(scanResult = "Non-valid folder path!", Severity.Error);
    //        return;
    //    }
    //    //
    //    scanResult = string.Empty;
    //    itemList.Clear();
    //    isLoading_scan = true;
    //    //
    //    await Task.Delay(1);
    //    //
    //    Stopwatch sw = new Stopwatch();
    //    //
    //    //method 1: calc hash after the whole select run and use parallel func.
    //    sw.Start();
    //    itemList = new DirectoryInfo(scanPath)
    //                .GetFiles("*", SearchOption.AllDirectories)
    //                .Select((fileInfo, idx) => new HashContent
    //                    {
    //                        No = idx + 1,                
    //                        FileName = fileInfo.Name,
    //                        FilePath = fileInfo.FullName
    //                    })
    //                .ToList();
    //    Parallel.ForEach(itemList, item => {
    //        try
    //        {
    //            //item.Hash = BitConverter.ToString(SHA1.Create().ComputeHash(File.OpenRead(item.FilePath))).Replace("-", "");
    //            item.Hash = SHA1Encrypt.genFileHash(item.FilePath);
    //        }
    //        catch (Exception ex)
    //        {
    //            item.Hash = $"err msg:{ex.Message}";
    //        }
    //        item.FilePath = $"~{item.FilePath.Substring(scanPath.Length)}";
    //    });
    //    sw.Stop();
    //    Snackbar.Add(scanResult = $"{itemList.Count():N0} rows updated in {sw.Elapsed.TotalSeconds:N2}s!", Severity.Warning);

    //    //
    //    isLoading_scan = false;

    //    //method 2: calc hash in each select run
    //    //sw.Restart();
    //    //using (SHA1 sha1 = SHA1.Create())
    //    //{
    //    //    itemList = new DirectoryInfo(scanPath)
    //    //    .GetFiles("*", SearchOption.AllDirectories)
    //    //    .Select((fileInfo, idx) => new HashContent
    //    //        {
    //    //            No = idx + 1,
    //    //            Hash = BitConverter.ToString(sha1.ComputeHash(fileInfo.OpenRead())).Replace("-", ""),
    //    //            FileName = fileInfo.Name,
    //    //            FilePath = $"~{fileInfo.FullName.Substring(scanPath.Length)}"
    //    //        })
    //    //    .ToList();
    //    //}
    //    //sw.Stop();
    //    //Snackbar.Add($"{itemList.Count()} rows updated! in {sw.Elapsed.TotalSeconds}s", Severity.Warning);


    //    //method 3: calc hash in each select run with async/await, then whenAll waiting
    //    //sw.Restart();
    //    //itemList = (await Task.WhenAll<HashContent>(
    //    //                    new DirectoryInfo(scanPath)
    //    //                        .GetFiles("*", SearchOption.AllDirectories)
    //    //                        .Select(async (fileInfo, idx) => new HashContent
    //    //                            {
    //    //                                No = idx + 1,
    //    //                                Hash = BitConverter.ToString(await SHA1.Create().ComputeHashAsync(fileInfo.OpenRead())).Replace("-", ""),
    //    //                                FileName = fileInfo.Name,
    //    //                                FilePath = $"~{fileInfo.FullName.Substring(scanPath.Length)}"
    //    //                            })
    //    //                    )
    //    //            ).ToList();
    //    //sw.Stop();
    //    //Snackbar.Add($"{itemList.Count()} rows updated! in {sw.Elapsed.TotalSeconds}s", Severity.Warning);
    //}


}
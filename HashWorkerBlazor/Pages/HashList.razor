@page "/HashList"

@using System.Diagnostics
@using HashWorkerBlazor.DB
@using HashWorkerBlazor.Models
@using System.Text.Json;
@inject ISnackbar Snackbar
@inject IHashWorkerApi api
@inject IDialogService DialogService

<PageTitle>HashList</PageTitle>

@if(itemList == null)
{
    <p><em>Loading...😘😘</em></p>
}
else
{
    <MudTable Items="@itemList" Dense="true" Hover="true" Bordered="false" Striped="true"
              RowsPerPage="10" LoadingProgressColor="Color.Info"
          Loading="@(isLoading_getData || isLoading_send)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Hash List
                @if (!string.IsNullOrWhiteSpace(dbSizeStr))
                {
                    <MudChip Variant="Variant.Outlined" Color="Color.Success">@dbSizeStr</MudChip>
                }
            </MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>CropImg</MudTh>
            <MudTh>Account</MudTh>
            @*<MudTh>FolderPath</MudTh>*@
            <MudTh>CreateTime</MudTh>
            <MudTh>LastSendTime</MudTh>
            <MudTh>HashCount</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">
                @context.Id
                <MudButton Disabled="@(isLoading_send && context.Id==curr_Idx)" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="@(()=>SendBtnClick(context.Id))">
                    @if (isLoading_send && context.Id == curr_Idx)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>ReSend</MudText>
                    }
                </MudButton>
            </MudTd>
            <MudTd DataLabel="Base64Img">
                <img width="100" src="@context.Base64Img" alt="no img" onclick="@(()=>CropImageClick(context.Base64Img))" />
            </MudTd>
            <MudTd DataLabel="Account">@context.Account</MudTd>
            @*<MudTd DataLabel="FolderPath">@context.FolderPath</MudTd>*@
            <MudTd DataLabel="CreateTime" HideSmall="true">@context.CreateTime</MudTd>
            <MudTd DataLabel="LastSendTime">@context.LastSendTime</MudTd>
            <MudTd DataLabel="HashCount" HideSmall="true">@context.HashCount.ToString("N0")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private readonly string localDbPath = "./HashWorkerDB.db";
    private string dbSizeStr = string.Empty;
    private List<ListItem> itemList = new List<ListItem>();
    private bool isLoading_getData = false;
    private bool isLoading_send = false;
    private int curr_Idx = 0;

    protected override async Task OnInitializedAsync()
    {
        isLoading_getData = true;
        itemList = (await api.GetListItemsAsync());
        isLoading_getData = false;
        //
        //dbSizeStr = GetDbSize();
        //
        await base.OnInitializedAsync();
    }

    private async void CropImageClick(string base64Img)
    {
        if (string.IsNullOrWhiteSpace(base64Img))
        {
            return;
        }
        var parameters = new DialogParameters();
        parameters.Add("Base64Img", base64Img);
        DialogOptions maxWidth = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialogresult = DialogService.Show<DialogImg>(string.Empty, parameters);
        var result = await dialogresult.Result;
    }

    private string GetDbSize()
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = new FileInfo(localDbPath).Length; //the size of the current file in bytes
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return string.Format($"DB Size: {len:0.##} {sizes[order]}");
    }

    private async Task SendBtnClick(int idx)
    {
        curr_Idx = idx;
        isLoading_send = true;
        //
        await Task.Delay(1);
        //
        var result = await api.ResendListAsync(idx);
        Snackbar.Add(result.msg, result.isOk ? Severity.Warning : Severity.Error);
        //
        curr_Idx = 0;
        isLoading_send = false;
    }

}

@page "/"

@using TmtsChecker.Data
@using TmtsChecker.Models
@using TmtsChecker.DB
@inject ITmtsDataApi api
@inject IScanResultService TmdResultService
@inject ISnackbar Snackbar
@inject IClipboardService ClipboardService

<PageTitle>Index</PageTitle>

@*<input type="checkbox" @onchange="eventArgs => { ScanSrcChanged(eventArgs.Value); }" /> TMD / TSD*@

<MudGrid>
    <MudItem xs="12" sm="6" md="6">
        <MudTextField @bind-Value="tmdResultFolder" Label="TM Path" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6" md="6">
        <MudTextField @bind-Value="tsdResultFolder" Label="TS Path" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
</MudGrid>
<div class="p-1">
@*    <button class="btn btn-outline-danger" @onclick="@(()=>getScanItemList(true))">
        <span class="oi oi-eye"> Show TM</span>
    </button>
    <button class="btn btn-outline-danger" @onclick="@(()=>getScanItemList(false))">
        <span class="oi oi-eye"> Show TS</span>
    </button>*@
    <MudButton Disabled="@(isLoading_tm || isLoading_ts)" Variant="Variant.Outlined" Color="Color.Primary"
               EndIcon="@Icons.Material.Filled.Send" OnClick="@(()=>getScanItemList(true))">
        @if (isLoading_tm)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Scan TM</MudText>
        }
    </MudButton>
    <MudButton Disabled="@(isLoading_tm || isLoading_ts)" Variant="Variant.Outlined" Color="Color.Primary"
               EndIcon="@Icons.Material.Filled.Send" OnClick="@(()=>getScanItemList(false))">
        @if (isLoading_ts)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Scan TS</MudText>
        }
    </MudButton>
    @if (!string.IsNullOrWhiteSpace(scanResult))
    {
        <MudChip Variant="Variant.Outlined" Color="Color.Success">@scanResult</MudChip>
    }

</div>


@if (scanItemList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
      <div class="row">
        <div class="col-sm-4">
            <MudPaper Class="pa-4  ma-2">
                <MudChart ChartType="ChartType.Pie" InputData="@pieDataList.ToArray()" @bind-SelectedIndex="pie_Index" InputLabels="@pieLabelList.ToArray()"  />
            </MudPaper>
            <MudPaper Class="pa-4  ma-2">
                <MudChart ChartType="ChartType.Donut" InputData="@donutDataList.ToArray()" @bind-SelectedIndex="donut_Index" InputLabels="@donutLabelList.ToArray()"  />
            </MudPaper>
        </div>
        <div class="col-sm-8">           
            <MudPaper Class="pa-4 ma-1" Elevation="3">        
                <MudAlert Severity="Severity.Info">
                    Lost Lambs (@assetList_missing.Count())
                </MudAlert>
                    @foreach (var missingItem in assetList_missing)
                    {
                        <MudChip Variant="Variant.Outlined" OnClick="@(()=>ClipboardService.CopyToClipboard(@missingItem))">
                            @missingItem
                        </MudChip>
                    }
            </MudPaper>      
            @foreach (var scanStatus in Enum.GetValues<ScanResult.ScanStatus>())
            {        
                <MudPaper Class="pa-4 ma-1" Elevation="3">        
                    <MudAlert Severity="Severity.Info">
                        @scanStatus (@scanItemList.Where(item=>item.Status==scanStatus).Count())
                    </MudAlert>
                        @foreach (var scanItem in scanItemList.Where(item=>item.Status==scanStatus))
                        {
                            @if (@scanItem.IsAsset)
                            {
                                <MudChip title="@scanItem.Ip" Variant="Variant.Outlined"
                                    OnClick="@(()=>ClipboardService.CopyToClipboard($"{scanItem.Hostname}{Environment.NewLine}{scanItem.Ip}"))">
                                    @scanItem.Hostname
                                </MudChip>
                            }
                            else
                            {
                                <MudChip title="@scanItem.Ip"
                         OnClick="@(()=>ClipboardService.CopyToClipboard($"{scanItem.Hostname}{Environment.NewLine}{scanItem.Ip}"))">
                                    @scanItem.Hostname
                                </MudChip>
                            }
                        }
                </MudPaper>        
            }
        </div>
      </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Hostname</th>
                <th>Ip</th>
                <th>Status</th>
                <th>IsComplete</th>
                <th>ResultSize</th>
                <th>FinishTime</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var scanItem in scanItemList)
            {
                <tr>
                    <td>@scanItem.Hostname</td>
                    <td>@scanItem.Ip</td>
                    <td>@scanItem.Status</td>
                    <td>@scanItem.IsComplete</td>
                    <td>@(scanItem.IsComplete ? scanItem.ResultSize + " MB" : "")</td>
                    <td>@(scanItem.IsComplete ? scanItem.FinishTime.ToString() : "")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Timer timer;
    private int timerInterval=30*1000;
    private bool isTmd;
    private bool isLoading_tm = false;
    private bool isLoading_ts = false;
    private string scanResult = string.Empty;

    //private IEnumerable<string> assetList;
    private List<string> assetList_missing = new List<string>();
    private List<ScanResult> scanItemList;
    //private bool isTmd = true;
    private string tmdResultFolder = @"C:\Users\user\Desktop\TMD_NISOC2022";
    private string tsdResultFolder = @"C:\Users\user\Downloads\TMTS_2022_AK\TSD_Result";

    private int pie_Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    List<double> pieDataList = new List<double>();
    List<string> pieLabelList = new List<string>();
    private int donut_Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    List<double> donutDataList = new List<double>();
    List<string> donutLabelList = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        isTmd = true;        
        //use timer to upload the data periodically
        timer = new Timer(async (object stateInfo) =>
            {
                await getScanItemList(isTmd);
                // Note that the following line is necessary because otherwise
                // Blazor would not recognize the state change and not refresh the UI
                await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
            }, new AutoResetEvent(false), 0, timerInterval);
        //
        await base.OnInitializedAsync();
    }    

    private async Task getScanItemList(bool isTmd)
    {
        isLoading_tm = isTmd ? true : false;
        isLoading_ts = isTmd ? false : true;
        scanResult = "loading...";
        System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
        sw.Start();

        this.isTmd = isTmd;
        scanItemList = await (isTmd ? TmdResultService.ScanFolderAsync(tmdResultFolder, "aptcheck.exe", ".zip")
                                    : TmdResultService.ScanFolderAsync(tsdResultFolder, "ThreatSonar.exe", ".report_bundle"));
        try
        {
            //compare w/ asset list
            var assetList = (await api.GetHostsAsync()).Select(item => item.Hostname);
            assetList_missing = assetList.ExceptBy(scanItemList.Select(item => item.Hostname), name => name).ToList();
            foreach (var item in scanItemList)
            {
                if (assetList.Contains(item.Hostname)) //itme in asset list
                {
                    item.IsAsset = true;
                }
            }

            //cnt for pie chart
            pieDataList.Clear();
            pieLabelList.Clear();
            foreach (var enumVal in Enum.GetValues<ScanResult.ScanStatus>())
            {
                pieDataList.Add(Convert.ToDouble(scanItemList.Where(sitem => sitem.Status == enumVal).Count()));
                pieLabelList.Add(enumVal.ToString());
            }
            //cnt for donut chart
            donutDataList.Clear();
            donutLabelList.Clear();
            foreach (var group in scanItemList.GroupBy(item => (item.Ip ?? string.Empty).Contains(".") ? item.Ip.Substring(0, item.Ip.LastIndexOf(".")) : "NAN"))
            {
                donutDataList.Add(Convert.ToDouble(group.Count()));
                donutLabelList.Add(group.Key);
            }
        }
        catch (Exception ex)
        {
            scanResult = $"Parsing error! Error msg: {ex.Message}";
            System.Diagnostics.Debug.WriteLine(scanResult);
        }
        //
        timer.Change(timerInterval, timerInterval);
        Snackbar.Add($"Data updated :{DateTime.Now.ToString()}", Severity.Success);
        //
        isLoading_tm = isLoading_ts= false;
        sw.Stop();
        scanResult = $"Scan {scanItemList.Count():N0} items in {sw.Elapsed.TotalSeconds:N2} s";
    }
}

